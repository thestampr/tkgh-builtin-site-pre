generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PUBLIC
  CUSTOMER
  PROVIDER
  ADMIN
}

enum BuiltInStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique @db.Citext
  passwordHash      String
  role              Role              @default(PUBLIC)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  analytics         AnalyticsEvent[]  @relation("UserAnalytics")
  builtIns          BuiltIn[]         @relation("ProviderBuiltIns")
  categories        Category[]
  favorites         FavoriteBuiltIn[]
  profile           Profile?
  estimates         Estimate[]        @relation("SubmittingUser")
  receivedEstimates Estimate[]        @relation("CategoryProvider")
  sessions          Session[]
}

model Profile {
  id           String               @id @default(cuid())
  userId       String               @unique
  displayName  String?
  bio          String?
  avatarUrl    String?
  contactJson  Json?
  coverImage   String?
  ctaJson      Json?
  updatedAt    DateTime             @updatedAt

  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  translations ProfileTranslation[]

  @@index([updatedAt(sort: Desc)])
}

model ProfileTranslation {
  id          String   @id @default(cuid())
  profileId   String
  locale      String   @db.VarChar(16)
  displayName String?
  bio         String?
  ctaLabel    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, locale])
  @@index([locale])
}

model Category {
  id           String                @id @default(cuid())
  providerId   String
  name         String
  slug         String                @db.VarChar(120)
  description  String?
  coverImage   String?
  excerpt      String?
  published    Boolean               @default(true)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  builtIns     BuiltIn[]
  provider     User                  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  translations CategoryTranslation[]
  estimates    Estimate[]            @relation("Estimates")

  @@unique([providerId, slug])
  @@index([providerId, published, updatedAt(sort: Desc)])
}

model BuiltIn {
  id           String               @id @default(cuid())
  providerId   String
  categoryId   String?
  title        String
  slug         String               @db.VarChar(120)
  summary      String?
  content      String?
  coverImage   String?
  galleryJson  Json?
  price        Int?
  currency     String?              @db.Char(3) // ISO 4217
  status       BuiltInStatus        @default(DRAFT)
  publishedAt  DateTime?
  ctaLabel     String?
  ctaUrl       String?
  icon         String?
  layout       String?
  viewCount    Int                  @default(0)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  analytics    AnalyticsEvent[]     @relation("BuiltInAnalytics")
  category     Category?            @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  provider     User                 @relation("ProviderBuiltIns", fields: [providerId], references: [id], onDelete: Cascade)
  translations BuiltInTranslation[]
  favorites    FavoriteBuiltIn[]

  @@unique([providerId, slug])
  @@index([providerId, status, publishedAt(sort: Desc)])
  @@index([categoryId, status, publishedAt(sort: Desc)])
  @@index([createdAt])
}

model CategoryTranslation {
  id          String   @id @default(cuid())
  categoryId  String
  locale      String   @db.VarChar(16)
  name        String?
  description String?
  excerpt     String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, locale])
  @@index([locale])
}

model BuiltInTranslation {
  id        String   @id @default(cuid())
  builtInId String
  locale    String   @db.VarChar(16)
  title     String?
  summary   String?
  content   String?
  ctaLabel  String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price     Int?
  currency  String?  @db.Char(3)

  builtIn   BuiltIn  @relation(fields: [builtInId], references: [id], onDelete: Cascade)

  @@unique([builtInId, locale])
  @@index([locale])
}

model FavoriteBuiltIn {
  userId    String
  builtInId String
  createdAt DateTime @default(now())

  builtIn   BuiltIn  @relation(fields: [builtInId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, builtInId])
  @@index([userId, createdAt])
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  type      String
  path      String
  userId    String?
  builtInId String?
  userAgent String?
  ipHash    String?
  createdAt DateTime @default(now())

  builtIn   BuiltIn? @relation("BuiltInAnalytics", fields: [builtInId], references: [id], onDelete: SetNull)
  user      User?    @relation("UserAnalytics", fields: [userId], references: [id], onDelete: SetNull)

  @@index([type, createdAt])
  @@index([builtInId, createdAt])
  @@index([userId, createdAt])
  @@index([path])
}

model Estimate {
  id         String    @id @default(cuid())
  locale     String?   @db.VarChar(16)
  name       String
  phone      String
  email      String?
  location   String?
  budget     String?
  detail     String
  createdAt  DateTime  @default(now())
  viewed     Boolean   @default(false)
  archived   Boolean   @default(false)

  userId     String?
  categoryId String
  providerId String

  user       User?     @relation("SubmittingUser", fields: [userId], references: [id], onDelete: Cascade)
  category   Category? @relation("Estimates", fields: [categoryId], references: [id], onDelete: Cascade)
  provider   User?     @relation("CategoryProvider", fields: [providerId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([archived])
  @@index([categoryId, createdAt])
  @@index([providerId, createdAt])
}
